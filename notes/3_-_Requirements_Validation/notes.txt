Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-01-22T23:54:09+01:00

====== Lecture ======
* Validating a requirement:
	* A requirement is serving some usefull purpose. 
	* If they are useless.
	* Talk with client. 
* Verifying a requirement:
	* Evaluating if they are good or bad. 
	* Cant be testable or measurable. 
	* Conflicting requirements
	* Ambigous. 
* Verification in software:
	* Testing
* Verification vs Validation:
	* Verification: You have build it in the right way. Build it correctly
	* Validation: Is it actually the thing the customer wants. Satisfying the need. 
* Problem frames
	* Tool to reason through an argument, so you can present an argument. 
	* Set of diagrams want to understand the requirements
	* Context Diagrams
		* Different domains
			* Machine
			* Designed
			* Given
			* Computer can be given
	* Domain Interfaces
		* Eaech interface is a set of shared phenomena
			* events, states values
	* Problem Diagrams
		* Shows how requirements relates to problem domains
		* Requirement can either change or dont the domain
		* Projection: find subsets for each requirement -> Subproblem diagram (Can be more specific with machine name)
		* Annotate domain: lexical(data representation), causal(predicable) and biddable (not-predictable)
	* Frame Concern
		* A bit like design patterns of level of requirements
		* Use sub-problem diagram to make diagram
		* If the system is organized in this way, then it will properties. 
	* Visualizing requirements, so they can be validated. 
* UML
	* Not used to design architecture
	* But to communicate and validate requirements 
	* Non-formal - there is room for interpretation
	* Talk about problem domain
	* Communicate the domain.
	* Use UML to communicate with clients. 
* Reviews and Inspection
* Formal meaning
	* Agreed upon
	* Exactly one interpretation

====== Requirements Validation ======
{{./pasted_image017.png}}
{{./pasted_image.png}}
===== How to perform requirement validation =====
{{./pasted_image001.png}}
==== Reviews ====
{{./pasted_image002.png}}
{{./pasted_image003.png}}

==== Inspections ====
{{./pasted_image004.png}}
{{./pasted_image005.png}}

===== Problem Frames =====
* Conceptual level of system. Dont care what it look like inside. 
{{./pasted_image006.png}}

==== Problem ====
* You are with a problem
* This is basically the context of the system of what it should do 
* You notice key words of the text. Which are to be used later. 

==== Context Diagram ====
* Describes domains need in the problem
* Need to be sure they are needed
{{./pasted_image007.png}}

==== Domain Interfaces ====
{{./pasted_image008.png}}
==== Problem Diagrams ====
* Introduces the requirements in the context diagram with the domain interfaces
* Obvious to complex as is. To many aspect. 
* Need to split out to only look at parts of the model at a time. 
{{./pasted_image009.png}}
{{./pasted_image010.png}}
{{./pasted_image012.png}}

==== Frame Concern ====
{{./pasted_image013.png}}


